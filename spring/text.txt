1. Spring의 xml설정
	"객체" -> 의존성 주입
	<beans> : 루드 엘리먼트(요소)
		<bean>(객체)의 생명주기를 컨테이너가 관리할 수 있게함
		네임스페이스를 선언하는 공간
	<bean>으로 객체가 등록되면 컨테이너가 lookup함(요청)
	
2. 스프링의 어노테이션설정 - 의존성 주입
	-xml이 과도해짐에 따른 설정 부담
	context 네임스페이스 선언 -> Component로 객체를 생성, 관리
	xml은 하나의 설정 페이지에서 객체들의 관계를 확인할 수 있다.
	<-> @Component 어노테이션을 상속받는 다양한 @의 등장(@Controller,@Service....)
	"의존성 주입"

=> 가장 이상적인 방법
@Component
@Autowired
	변경될 가능성이 있는 객체에 대해서 xml로 설정을 해두자
		<bean id="jdbcTemplate">
		<bean id="JDBCUtill">
		<bean id="Mybatis">
		
3. AOP - 트랜잭션 처리(높은 응집도)
"비즈니스 로직, 메서드" -> 사용자가 수행하고자하는 업무
+ 로깅처리, 예외처리, 트랜잭션 처리 => 부가적인 코드
[ 관심 분리 ] => 핵심 기능, 관심 + 횡단 관심
-비즈니스 코드에 공통적으로 들어가는 코드를 설정하거나